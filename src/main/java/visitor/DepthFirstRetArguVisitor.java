/* Generated by JTB 1.4.4 */
package main.java.visitor;

import main.java.syntaxtree.*;
import java.util.Iterator;

public class DepthFirstRetArguVisitor<R, A> implements IRetArguVisitor<R, A> {


  public R visit(final NodeChoice n, final A argu) {
    final R nRes = n.choice.accept(this, argu);
    return nRes;
  }

  public R visit(final NodeList n, final A argu) {
    R nRes = null;
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      @SuppressWarnings("unused")
      final R sRes = e.next().accept(this, argu);
    }
    return nRes;
  }

  public R visit(final NodeListOptional n, final A argu) {
    if (n.present()) {
      R nRes = null;
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        @SuppressWarnings("unused")
        R sRes = e.next().accept(this, argu);
        }
      return nRes;
    } else
      return null;
  }

  public R visit(final NodeOptional n, final A argu) {
    if (n.present()) {
      final R nRes = n.node.accept(this, argu);
      return nRes;
    } else
    return null;
  }

  public R visit(final NodeSequence n, final A argu) {
    R nRes = null;
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      @SuppressWarnings("unused")
      R subRet = e.next().accept(this, argu);
    }
    return nRes;
  }

  public R visit(final NodeToken n, @SuppressWarnings("unused") final A argu) {
    R nRes = null;
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return nRes;
  }

  public R visit(final Goal n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
    return nRes;
  }

  public R visit(final StmtList n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    return nRes;
  }

  public R visit(final Procedure n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
    return nRes;
  }

  public R visit(final Stmt n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    return nRes;
  }

  public R visit(final NoOpStmt n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    return nRes;
  }

  public R visit(final ErrorStmt n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    return nRes;
  }

  public R visit(final CJumpStmt n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    return nRes;
  }

  public R visit(final JumpStmt n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    return nRes;
  }

  public R visit(final HStoreStmt n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    return nRes;
  }

  public R visit(final HLoadStmt n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    return nRes;
  }

  public R visit(final MoveStmt n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    return nRes;
  }

  public R visit(final PrintStmt n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    return nRes;
  }

  public R visit(final Exp n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    return nRes;
  }

  public R visit(final StmtExp n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
    return nRes;
  }

  public R visit(final Call n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    n.f3.accept(this, argu);
    n.f4.accept(this, argu);
    return nRes;
  }

  public R visit(final HAllocate n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    return nRes;
  }

  public R visit(final BinOp n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    n.f2.accept(this, argu);
    return nRes;
  }

  public R visit(final Operator n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    return nRes;
  }

  public R visit(final SimpleExp n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    return nRes;
  }

  public R visit(final Temp n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    return nRes;
  }

  public R visit(final IntegerLiteral n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    return nRes;
  }

  public R visit(final Label n, final A argu) {
    R nRes = null;
    n.f0.accept(this, argu);
    return nRes;
  }

}
