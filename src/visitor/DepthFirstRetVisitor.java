/* Generated by JTB 1.4.4 */
package visitor;

import syntaxtree.*;
import java.util.*;

public class DepthFirstRetVisitor<R> implements IRetVisitor<R> {


  public R visit(final NodeChoice n) {
    final R nRes = n.choice.accept(this);
    return nRes;
  }

  public R visit(final NodeList n) {
    R nRes = null;
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      @SuppressWarnings("unused")
      final R sRes = e.next().accept(this);
    }
    return nRes;
  }

  public R visit(final NodeListOptional n) {
    if (n.present()) {
      R nRes = null;
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        @SuppressWarnings("unused")
        R sRes = e.next().accept(this);
        }
      return nRes;
    } else
      return null;
  }

  public R visit(final NodeOptional n) {
    if (n.present()) {
      final R nRes = n.node.accept(this);
      return nRes;
    } else
    return null;
  }

  public R visit(final NodeSequence n) {
    R nRes = null;
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      @SuppressWarnings("unused")
      R subRet = e.next().accept(this);
    }
    return nRes;
  }

  public R visit(final NodeToken n) {
    R nRes = null;
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return nRes;
  }

  public R visit(final Goal n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    return nRes;
  }

  public R visit(final StmtList n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final Procedure n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    return nRes;
  }

  public R visit(final Stmt n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final NoOpStmt n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final ErrorStmt n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final CJumpStmt n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final JumpStmt n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return nRes;
  }

  public R visit(final HStoreStmt n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    return nRes;
  }

  public R visit(final HLoadStmt n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    return nRes;
  }

  public R visit(final MoveStmt n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final PrintStmt n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return nRes;
  }

  public R visit(final Exp n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final StmtExp n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    return nRes;
  }

  public R visit(final Call n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    return nRes;
  }

  public R visit(final HAllocate n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return nRes;
  }

  public R visit(final BinOp n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final Operator n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final SimpleExp n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final Temp n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return nRes;
  }

  public R visit(final IntegerLiteral n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final Label n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

}
