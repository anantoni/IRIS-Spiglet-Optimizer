/* Generated by JTB 1.4.4 */
package visitor;

import syntaxtree.*;
import java.util.*;

public class DepthFirstVoidVisitor implements IVoidVisitor {


  public void visit(final NodeChoice n) {
    n.choice.accept(this);
    return;
  }

  public void visit(final NodeList n) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this);
    }
    return;
  }

  public void visit(final NodeListOptional n) {
    if (n.present()) {
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        e.next().accept(this);
        }
      return;
    } else
      return;
  }

  public void visit(final NodeOptional n) {
    if (n.present()) {
      n.node.accept(this);
      return;
    } else
    return;
  }

  public void visit(final NodeSequence n) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this);
    }
    return;
  }

  public void visit(final NodeToken n) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  public void visit(final Goal n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
  }

  public void visit(final StmtList n) {
    n.f0.accept(this);
  }

  public void visit(final Procedure n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
  }

  public void visit(final Stmt n) {
    n.f0.accept(this);
  }

  public void visit(final NoOpStmt n) {
    n.f0.accept(this);
  }

  public void visit(final ErrorStmt n) {
    n.f0.accept(this);
  }

  public void visit(final CJumpStmt n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
  }

  public void visit(final JumpStmt n) {
    n.f0.accept(this);
    n.f1.accept(this);
  }

  public void visit(final HStoreStmt n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
  }

  public void visit(final HLoadStmt n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
  }

  public void visit(final MoveStmt n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
  }

  public void visit(final PrintStmt n) {
    n.f0.accept(this);
    n.f1.accept(this);
  }

  public void visit(final Exp n) {
    n.f0.accept(this);
  }

  public void visit(final StmtExp n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
  }

  public void visit(final Call n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
  }

  public void visit(final HAllocate n) {
    n.f0.accept(this);
    n.f1.accept(this);
  }

  public void visit(final BinOp n) {
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
  }

  public void visit(final Operator n) {
    n.f0.accept(this);
  }

  public void visit(final SimpleExp n) {
    n.f0.accept(this);
  }

  public void visit(final Temp n) {
    n.f0.accept(this);
    n.f1.accept(this);
  }

  public void visit(final IntegerLiteral n) {
    n.f0.accept(this);
  }

  public void visit(final Label n) {
    n.f0.accept(this);
  }

}
